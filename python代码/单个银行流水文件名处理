#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os
import re


def get_unique_path(path):
    """Avoid overwriting: if path exists, append (1), (2), ..."""
    base, ext = os.path.splitext(path)
    counter = 1
    new_path = path
    while os.path.exists(new_path):
        new_path = f"{base}({counter}){ext}"
        counter += 1
    return new_path


def pad_serial_numbers(root_dir, width=5):
    """
    Pad leading numeric serial before '、' to a fixed width, e.g. '92、...' → '00092、...'
    """
    pattern = re.compile(r'^(\d+)、')
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            m = pattern.match(filename)
            if not m:
                continue
            num = int(m.group(1))
            padded = f"{num:0{width}d}"
            new_name = padded + '、' + filename[len(m.group(0)):]
            old_path = os.path.join(dirpath, filename)
            new_path = os.path.join(dirpath, new_name)
            unique_new = get_unique_path(new_path)
            os.rename(old_path, unique_new)
            print(f"Renamed: {old_path} -> {unique_new}")


def remove_date_suffix(root_dir):
    """
    Remove any date-like suffix '（YYYY.MM.DD）' from file names.
    """
    date_pattern = re.compile(r'（\d{4}\.\d{1,2}\.\d{1,2}）')
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            name, ext = os.path.splitext(filename)
            new_name_part = date_pattern.sub('', name)
            if new_name_part == name:
                continue
            new_name = new_name_part + ext
            old_path = os.path.join(dirpath, filename)
            new_path = os.path.join(dirpath, new_name)
            unique_new = get_unique_path(new_path)
            os.rename(old_path, unique_new)
            print(f"Removed date suffix: {old_path} -> {unique_new}")


def remove_custom_suffix(root_dir, suffix_text):
    """
    Remove a specific Chinese bracket suffix like '（期间缺失）', '（余额差异较大）', etc.
    """
    pattern = re.compile(re.escape(suffix_text))
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            name, ext = os.path.splitext(filename)
            new_name_part = pattern.sub('', name)
            if new_name_part == name:
                continue
            new_name = new_name_part + ext
            old_path = os.path.join(dirpath, filename)
            new_path = os.path.join(dirpath, new_name)
            unique_new = get_unique_path(new_path)
            os.rename(old_path, unique_new)
            print(f"Removed '{suffix_text}': {old_path} -> {unique_new}")


def remove_all_numeric_suffix(root_dir):
    """
    Remove all numeric suffixes in both halfwidth '(1)' and fullwidth '（1）' up to any number.
    """
    # matches '(123)' or '（123）'
    pattern = re.compile(r'(?:\(\d+\)|（\d+）)')
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            name, ext = os.path.splitext(filename)
            new_name_part = pattern.sub('', name)
            if new_name_part == name:
                continue
            new_name = new_name_part + ext
            old_path = os.path.join(dirpath, filename)
            new_path = os.path.join(dirpath, new_name)
            unique_new = get_unique_path(new_path)
            os.rename(old_path, unique_new)
            print(f"Removed numeric parentheses suffix: {old_path} -> {unique_new}")


def add_custom_suffix(root_dir, option):
    suffix_map = {
        1: '（余额差异较大）',
        2: '（期间缺失）',
        3: '（信用账户）',
    }
    suffix = suffix_map.get(option)
    if suffix is None:
        print("无效选项，必须是1-3")
        return
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            name, ext = os.path.splitext(filename)
            if name.endswith(suffix):
                continue
            new_name = name + suffix + ext
            old_path = os.path.join(dirpath, filename)
            new_path = os.path.join(dirpath, new_name)
            unique_new = get_unique_path(new_path)
            os.rename(old_path, unique_new)
            print(f"Renamed: {old_path} -> {unique_new}")


def add_date_suffix(root_dir, date_str):
    suffix = f'（{date_str}）'
    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            name, ext = os.path.splitext(filename)
            if name.endswith(suffix):
                continue
            new_name = name + suffix + ext
            old_path = os.path.join(dirpath, filename)
            new_path = os.path.join(dirpath, new_name)
            unique_new = get_unique_path(new_path)
            os.rename(old_path, unique_new)
            print(f"Renamed: {old_path} -> {unique_new}")


def main():
    folder = input("请输入要处理的文件夹路径：").strip('"')
    if not os.path.isdir(folder):
        print("路径无效，请检查后重试。")
        return
    print("选择功能:")
    print(" 0: 添加日期后缀 (自定义日期)")
    print(" 1: 添加后缀 （余额差异较大）")
    print(" 2: 添加后缀 （期间缺失）")
    print(" 3: 添加后缀 （信用账户）")
    print(" 4: 变更序号位数 (pad serial numbers)")
    print(" 5: 清除后缀 (remove suffix)")
    try:
        opt = int(input("输入选项 (0-5): ").strip())
    except ValueError:
        print("请输入有效数字选项")
        return

    if opt == 0:
        date_str = input("请输入日期（格式 YYYY.MM.DD）：").strip()
        add_date_suffix(folder, date_str)
    elif opt in (1, 2, 3):
        add_custom_suffix(folder, opt)
    elif opt == 4:
        try:
            width = int(input("请输入序号位数: ").strip())
        except ValueError:
            print("无效输入，使用默认位数5")
            width = 5
        pad_serial_numbers(folder, width)
    elif opt == 5:
        print("清除哪个后缀？")
        print(" 1: 清除日期后缀")
        print(" 2: 清除余额差异较大后缀")
        print(" 3: 清除期间缺失后缀")
        print(" 4: 清除信用账户后缀")
        print(" 5: 清除重名符 (半/全角数字括号)")
        try:
            rem = int(input("输入选项 (1-5): ").strip())
        except ValueError:
            print("无效输入，操作取消。")
            return
        if rem == 1:
            remove_date_suffix(folder)
        elif rem == 2:
            remove_custom_suffix(folder, '（余额差异较大）')
        elif rem == 3:
            remove_custom_suffix(folder, '（期间缺失）')
        elif rem == 4:
            remove_custom_suffix(folder, '（信用账户）')
        elif rem == 5:
            remove_all_numeric_suffix(folder)
        else:
            print("无效选项，操作取消。")
    else:
        print("无效选项，操作取消。")

if __name__ == '__main__':
    main()
